<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>BookShop</display-name>
  
  <!-- context-param该元素用来声明应用范围(整个WEB项目)内的上下文初始化参数 -->
	<!-- 初始化过程： 在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。 
		接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。 
		接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。 
		容器创建<listener></listener>中的类实例,即创建监听
		（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。 
		在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，
		在这个方法中可以通过event.getServletContext().getInitParameter("contextConfigLocation") 
		来得到context-param 设定的值。在这个类中还必须有一个contextDestroyed(ServletContextEvent event) 
		销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。
		 得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.
		 这个动作会比所有的Servlet都要早 -->
	<context-param>
		<description>spring以及spring集成配置文件</description>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring.xml;classpath:spring-mybatis.xml</param-value>
	</context-param>

	<!-- 过滤器 -->
	<filter>
		<description>字符集过滤器</description>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<description>字符集编码</description>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 监听器 -->
	<listener>
		<description>spring监听器</description>
		<display-name>spring监听器</display-name>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- servlet 配置 -->
	<servlet>
		<description>spring mvc servlet,action分发器配置</description>
		<servlet-name>springMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

		<init-param>
			<description>spring mvc 配置文件</description>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>

		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<!-- 拦截所有请求.do -->
		<servlet-name>springMvc</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<session-config>
		<session-timeout>15</session-timeout>
	</session-config>
  
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>